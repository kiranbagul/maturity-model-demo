Test Pyramid:
  Unit tests - FE:
    No unit tests present:
      
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Unit testing framework exists with the ability to add & exeutute for FE:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Basic unit tests cover some core functionality.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Code coverage > 40%:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Fail the build if coverage goes below 40%:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    No flaky tests:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Code coverage > 70%:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Fail the build if coverage goes below 70%:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    UT coverage > 90%:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Fail the build if coverage goes below 90%:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Adopt auto generatation of unit tests using AI:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Unit tests - BFF:
    No unit tests present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Unit testing framework exists with the ability to add & exeutute for FE:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Basic unit tests cover some core functionality.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Code coverage > 40%:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Fail the build if coverage goes below 40%:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    No flaky tests:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Code coverage > 70%:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Fail the build if coverage goes below 70%:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    UT coverage > 90%:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Fail the build if coverage goes below 90%:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Adopt auto generatation of unit tests using AI:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Component test:
    No component tests present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Componant test framework present.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Capability to mock depedant service and infrastructure.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Limited component tests for key components.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Test suite stability (no flaky tests).:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Half of all the components and services are covered:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    P1 and P2 scenarios are identified and automated.: 
      level: 4
      tags:
      - none
      teamsImplemented:
        Default: false
    All the components and services are covered:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Thorough test coverage resulting in a decrease in the number of defects discovered at the component level, bringing it below the established threshold.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Contract tests:
    No contract tests present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Contract test framework and infrastructure present.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Basic contract tests for critical services.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Test suite stability (no flaky tests).:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    50% of all the services are covered for contract tests:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    100% of services are covered for contract tests:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Effective contract testing for all services resulting in a reduction of defects detected at the contract level to below the defined threshold.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  API Integration Tests:
    No REST API Integration tests present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Framework present. A small number of API integration tests for core user journeys are present:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    50% of all the APIs are covered in test automation.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Test suite stability (no flaky tests).:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    A wide range of end-to-end tests covering various user scenarios.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    100% of all the APIs are covered in test automation:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    A comprehensive test coverage of end-to-end scenarios covering the entire application and interactions, resulting in a reduction of defects detected at the REST API layer to below the defined threshold.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  UI Functional tests:
    No UI Functional Tests present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Framework present.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    A small number of UI functional tests for core user journeys.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    All the P1 scenarios of the features are covered.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    All the P2 scenarios of the features are covered.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Test suite stability (no flaky tests).:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    In total automatable tests, the test coverage is > 70%:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    In total automatable tests, the test coverage is > 90%:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Pyramid balance:
    No pyramid exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    The primary focus of the test strategy is on functional tests conducted at the UI level.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Code coverage of unit + component tests > 25%:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    The emphasis in the test strategy is placed on both UI tests and API integration tests.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Code coverage of unit + component tests > 50%:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    The test strategy encompasses a range of tests, including unit, component, API integration, and UI functional tests.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Code coverage of unit + component tests > 90%:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    The test pyramid is fine-tuned to prioritize comprehensive coverage of unit, component, and integration tests, with a limited UI functional tests.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
CI/CD Pipeline:
  CI Build Pipeline for unit, component and contract tests:
    There are no build pipelines configured:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Build pipeline exists that triggers unit tests for each commit:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Failing test should abort the peipeline.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Notification the entire team breaking build:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Build pipline''s ability to trigger unit tests, component tests and contract tests in parallel for each commit:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Test execution time is < 5 minutes:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  CI jobs for API and Functional test automation pipeline:
    No pipelines configured:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Full blown Regression suite for API Integration tests triggers on a schedule.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Full blown Regression suite for UI functional tests triggers on a schedule:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Sanity suite of API Integration tests gets triggered after auto-deployment.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Sanity suite of UI functional tests gets triggered after auto-deployment.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Mechanism to automatically notify the team of any failures in the sanity tests and regression runs exists.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Configured CI job to run tests in parallel - API.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Configured CI job to run tests in parallel - UI.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Test execution time of sanity tests < 10 mins.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Test execution time of regression tests < 1 hr.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Capablility of executing only impacted feature tests by the code that is modified:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
Reporting and Dashboard:
  Reporting:
    No reporting tools/frameworks in use:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    A basic HTML reports capturing the test execution summary is present.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Test Trends are available for past executions as part of CI pipeline:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Emailable summary reports are generated and sent:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    The HTML has comprehensive details of failing tests including logs, exceptions, screen captures and videos:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Dashboard:
    No testing dashboards are present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    A basic test reporting dashboard exist showing the Test Execution Summary:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    A dashboard showing comprehensive details as widgets - Test Automation Coverage, Test Automation Execution time, Defects caughy by automation, maintenance effort:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    A dashboard with testing trends. Trends of historic - pass/fail percentage, test case growth over a period time, historical test coverage, and historical test execution time:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Capabality to drill down a specific test execution for further fine grained details about the a specific build and test:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Test Analytics in the Dashboard:
    No Analytics is built in:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Auto categorise test failures and aggregate the total number of failures per category:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to automatically flag flaky tests.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to identify the test anamolies - slow tests, always failing tests, duplicate tests, new failures, unique failures:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Proactively identify and prevent potential future problems using AI-driven test intelligence insights.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
Code Quality:
  Clean code:
    No focus on clean coding:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Documented coding standards, best practices and awareness:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Team Uses static analyzers or linters, to examine the source code of a program without executing it. They analyze the code to identify potential issues, bugs, vulnerabilities, or code quality violations. Example - ESLint, Pylint, or SonarQube:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Leveraging the language specific latest features techniques.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Build pipeline that performs the static checks on the code and fails the build if not met with the defined standards:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    AI techniques to review and improvise the code quality.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Integrate the AI code review process as part of the CI pipeline:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Design Principles:
    No focus on design principles and language specific capabilities:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Documented design princiles, guidelines and language specific capabalities:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Scheduled meetings to review design and enhancements.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Merge Request checklist is defined with do's and dont's along with Merge Request Template:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Using tools to identify cyclomatic complexity, code duplication, code smells, anti-patterns and security vulnerabilities:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    AI techniques to validate and improvise the design. AI to leverage code smells, anti-patterns and vulnerabilities:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
Test Framework & Test Authoring:
  Framework capabalities:
    No framework capabilities exist:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Minimum capabalities are present. Reporting, Logging, Ability to take screenshots, Data-Driven testing:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    High degree of parallel test execution.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    High degree of distributed test execution.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Integration with Cloud Infra to execute tests against real devices / browsers:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Integration with test case management system.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Configurablility to execute suites for a specific set of configs (external configuration).:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Ability to choose specific devices and browsers for test execution:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Use of libraries, utils, and equivalent to improvise the test authoring speed and abstractions to platform features.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Develop or integrate 3rd party Test Observability/Analytics platform:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Test Data Management:
    No Test Data management strategy exist:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Test Data creation strategy for various environments exists:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Leverage application APIs to create test data.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    TestData generation libraries like Faker. Inject seed-data during deployment:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Test Data generation on-demand by tests.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Test Data creation and management for localisations and across various possible configurstions.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Cleanup of Test Data post test execution:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Create Test Data Service that could cater various test data needs:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Automated Test cases:
    Test cases are not written:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Tests having metadata for - traceablity to requirements, functional categories, group that it belongs to ex smoke/regression, Author etc:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Tests are written with the coding best practices that are defined as part of "Code Quality" dimention.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Tests that are focussed on the intent of the test and hides the implementation from the test layer.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Test patterns that speed up new test case development and improve the code readablity and organization. Example - AAA pattern, Method Chaining Pattern:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Generate test templates by means of low-code / code generative techniques.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to identify test gaps and new test scenarios using ML/AI techniques:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Local setup:
    No documenation exists to setup:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Basic README or instructions to setup local machine and execute tests:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Accuracy and correctness of README file.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Ability to debug/execute tests locally:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Comprehensive living README file with detailed instructions to setup local machine and execute tests:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Single command/CLI to complete the entire local setup and verify for correctness:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
Test Infrastructure:
  Test Environment:
    No test environment present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Shared test environment:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Dedicated test automation environment.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Controlled  deployments:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    On-demand test environemnt creation and decommission:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Provision to virtualise portions of internal systems and 3rd part services to unblock the test automation.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Automatically switch to virtualised systems if real systems are down:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  3rd party Browser and Device cloud:
    No browser/device clouds present:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Limited Use - Manual testing / AdHoc testing:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Use of cloud infra in developing and executing tests on local machines:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Use of cloud infra in executing tests in CI build pipeline:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
Strategy and Process:
  Test Backlog strategy:
    No backlog management process exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Backlog management of tests exists. Recurring Triaging process:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Clear guidelines are defined for determining what to automate and what not to automated:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Clear guidelines to choose right layer to automate the test.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Tech Debt Management:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Measure the backlog size, burn rate over the sprints as part of the dashboard.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Tool selection:
    No Tool selection strategy exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Defined tool selection criteria and  parameters exists:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Documented Study of comparision of the  tools and evaluation process.. Documenting Selected automation tool's effectiveness:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Upgrading, Refining and enhancing the tech stack/tools (Recurring):
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Keep constant look at new and modern tools and techniques. Recommend changes and new additions based on the study.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  In-Sprint test automation:
    No In-Sprint test automation exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Only basic feature tests automated and remaining goes to backlog:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    In-Sprint test automation achived with no backlog:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Version-Control:
    No version control in place:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Team pushes code to master/main branch directly:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Team works on local branches. Team raises Merge Requests.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Merge Request checklist is defined with do''s and dont''s along with Merge Request Template:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Mapping between the application's code version to that of test code's version exists.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Failure Analysis and Test script maintainance:
    No strategt for failure analysis:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Documentation processes and guidelines to approach the test maintenance:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Leverages the reports, dashboards and analytics for faster debugging and fixing:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Analyse the test failures early and often:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Test case curating/optimising the tests to keep the tests consise and precise. Intelligence that classifies the test fialures into bugs/script issues/env issues:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Testing Roadmap:
    No roadmap exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Adhoc roadmap exists:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Clear testing roadmap defined with milestones and Short/Mid/Long term goals:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    The testing roadmap factors the resourcing, and upskilling the resources on the ground.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    The roadmap factors tech debts, enhancements and delivery risks:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
NFR:
  Performance Test - Web:
    No Performance testing exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Clear performance requirements, wrt the production load and other parameters like page load time is defined.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Identifying the crucial scenarios and workload pattern based on the production traffic/analytics:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Performance test script development for cruicial scenarios.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Dedicated performance test environment that is scaled down version of the production (ideally same as production).:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    On-demand trigger of performance test scripts.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Ability to monitor the  performance metrics and reporting.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    Analysis of the reports and identifying the problems:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: true
    On demand performance test environment creation and decommission.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Continous performance testing. Trigger the performance tests from CI. Ideal frequency is once per commit:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Performance Test - API:
    No API Performance testing exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Clear performance requirements, wrt the production load and other parameters like SLA.:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Identifying the crucial scenarios and workload pattern based on the production traffic/analytics:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Performance test script development for cruicial scenarios.:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: false
    Dedicated performance test environment that is scaled down version of the production (ideally same as production).:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to monitor the  performance metrics and reporting.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Analysis of the reports and identifying the problems:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    On demand performance test environment creation and decommission.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Continous performance testing. Trigger the performance tests from CI. Ideal frequency is once per commit:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Visual regression:
    No Visual Regression Testing exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Visual Testing suite is present with smoke tests:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: true
    Ability to compare the snapshot of the entire page/a particular section of the page:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Visual tests are part of the CI pipiline:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to execute tests for different resolutions.:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
    Comprehensive test suite covering all the application pages:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
  Browser and Device compatibility testing - Functional Testing:
    No compatiability tests exists:
      level: 1
      tags:
        - none
      teamsImplemented:
        Default: false
    Clear requirements of the supported list of browsers, versions, device spectrum:
      level: 2
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to pick subset of the browsers/devices and execute the automated tests:
      level: 3
      tags:
        - none
      teamsImplemented:
        Default: true
    Use of 3rd party cloud/device providers.:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Ability to choose configuration and excute tests in the CI pipiline:
      level: 4
      tags:
        - none
      teamsImplemented:
        Default: false
    Comprehensive test coverage and execution against the list of supported list of browsers/devices:
      level: 5
      tags:
        - none
      teamsImplemented:
        Default: false
